#!/usr/bin/env bash
#
# chk_dupes
# Version: 1.1.0
#
# Project Description:
# This script helps identify and remove duplicate files within specified directories.
#
# How it works:
# The script quickly identifies all directories with duplicates in an initial run,
# writes their names into a file called "folders", and then goes through these
# directories in a dialogue with the user.
#
# Usage:
# ./chk_dupes [directory_name_beginnings...]
#
# Dependencies:
# - tree
# - fdupes
#
# Author: Bernd Storck
# Contact: https://www.facebook.com/BStLinux/
#
# History: 2024-04-05, 2024-04-06
# Updated: 2024-04-06
#
# Copyright (c) 2024 Bernd Storck
# All rights reserved.
#

VERSION="1.1.0"

# Funktion zur Anzeige der Verwendung des Skripts
usage() {
echo " chk_dupes $VERSION

 AUFRUF

 in einem Verzeichnis mit einem oder mehreren Verzeichnisnamensanfaengen
 unmittelbarer Unterordner.

 Um beispielsweise alle direkten Unterverzeichnisse, die mit A oder B oder C
 beginnen, zu überprüfen:

   chk_dupes A B C

 Das Programm arbeitet im Dialog: Zu allen Dubletten die es findet, fragt es den
 Anwender, welche er behalten (!) moechte. Will man eine Datei behalten, gibt man
 deren Nummer ein. Moechte man mehrere behalten, kann man mehrere Nummern
 eingeben, und zwar getrennt durch \", \", also ein Komma und ein folgendes
 Leerzeichen. Moechte man alle Dateien behalten, gibt man das Wort \"all\"
 ein.

 Man sollte genau hingucken und in Zweifelsfaellen parallel ueberpruefen, welche
 Dateien als gleich oder loeschbar angefuehrt werden.
"
}

is_validate_directory_name() {
# Determines whether all given strings would be valid
# directory names under Linux.

  local invalid_chars='[^a-zA-Z0-9._-+]'
  for dir_name in "$@"; do
    if [[ $dir_name =~ $invalid_chars ]]; then
      echo "Ungültiger Verzeichnisname: $dir_name"
      return 1
    fi
  done
  return 0
}


case "$1" in
  -h|--help|--hilf|-help|-hilf)
    usage; exit;;
esac

stop_execution=

# Error messages because of unfullfilled dependencies:
# Überprüft, ob erforderliche Programme installiert sind
for needed_prog in tree fdupes; do
  if ! command -v "$needed_prog" >/dev/null 2>&1; then
    echo >&2 "Das Programm '$needed_prog' fehlt."  > /dev/stderr
    stop_execution="forced"
  fi
done

# Beenden des Skripts, wenn erforderliche Programme fehlen:
if [ -n "$stop_execution" ]; then
  echo "Abbruch: Installieren Sie die notwenigen Programme!" > /dev/stderr
  exit 1
fi

# Überprüfung der Verzeichnisnamen:
if ! is_validate_directory_name "$@"; then
  echo "Das Skript wurde aufgrund ungültiger Eingabeparameter beendet."
  exit 1
fi

# Build string with alternative folder name beginnings:
alternatives=
for i in "$@"; do
  alternatives="$alternatives|$i"
done
alternatives="${alternatives##|}"


# Write the file 'list' containing the names of all direct sub folders:
tree -d -L 1 | cut -d' '  -f2 | grep -E "^\b($alternatives)" > list

# Write the file "folders" with the names of the folders with dupes:
rm folders 2> /dev/null
while read -r line; do
  if fdupes -qr "$line" | grep .; then
    echo "$line" >> folders
  fi
done < list

# Starts dialogical delete session:
if [ -f folders ]; then
  cat folders
  sleep 2
  while read -r line; do
    echo -e "\nOrdner \"$line\":"
    sleep 1
    echo
    fdupes -rd "$line"
  done < folders
else
  echo "Keine Verzeichnisse mit Dubletten gefunden!"
fi

rm -f list 2> /dev/null

exit 0
